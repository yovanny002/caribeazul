<%- include('../partials/header', { title: 'Gestión de Clientes' }) %>

<style>
    /* Optional: Style for highlighting rows (e.g., after add/edit) */
    .table-row-highlight {
        animation: highlight 2s ease-out;
    }
    @keyframes highlight {
        from { background-color: #d4edda; } /* Light green */
        to { background-color: transparent; }
    }
    /* Style for tooltips to be visually consistent */
    .tooltip-inner {
        background-color: #343a40; /* Dark background */
        color: #fff;
    }
    .tooltip.bs-tooltip-auto[x-placement^=top] .tooltip-arrow::before,
    .tooltip.bs-tooltip-top .tooltip-arrow::before {
        border-top-color: #343a40;
    }
</style>

<div class="container-fluid px-4 mt-4">
    <div class="card border-0 shadow-sm">
        <div class="card-header bg-primary text-white py-3">
            <div class="d-flex justify-content-between align-items-center flex-wrap">
                <h2 class="mb-0">
                    <i class="fas fa-users me-2"></i>Gestión de Clientes
                </h2>
                <div class="d-flex flex-column flex-md-row align-items-stretch mt-2 mt-md-0 gap-2">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input type="text" id="clientSearch" class="form-control form-control-sm" placeholder="Buscar cliente por nombre o cédula..." aria-label="Buscar cliente">
                    </div>

                    <select id="clientStatusFilter" class="form-select form-select-sm">
                        <option value="todos">Todos los Estados</option>
                        <option value="activo">Activos</option>
                        <option value="inactivo">Inactivos</option>
                    </select>

                    <a href="/clientes/create" class="btn btn-light btn-sm">
                        <i class="fas fa-user-plus me-1"></i> Nuevo Cliente
                    </a>
                </div>
            </div>
        </div>

        <div class="card-body">
  

            <div class="table-responsive">
                <% if (clientes.length > 0) { %>
                    <table class="table table-hover table-striped align-middle mb-0" id="clientsTable">
                        <thead class="table-light">
                            <tr>
                                <th>ID</th>
                                <th>Foto</th>
                                <th class="sortable" data-sort="nombre">Nombre / Apodo</th>
                                <th class="sortable" data-sort="cedula">Cédula</th>
                                <th>Teléfonos</th>
                                <th class="sortable" data-sort="estado">Estado</th>
                                <th>Acciones</th>
                            </tr>
                            </thead>
                        <tbody>
                            <% clientes.forEach((c) => { %>
                                <tr data-client-id="<%= c.id %>" data-estado="<%= c.estado %>">
  <td><%= c.id %></td>

                                <td>
                                    <% if (c.foto) { %>
                                    <img src="<%= c.foto %>" alt="Foto de <%= c.nombre %>" class="rounded-circle shadow-sm" style="width: 45px; height: 45px; object-fit: cover;">
                                    <% } else { %>
                                    <span class="badge bg-secondary">Sin Foto</span>
                                    <% } %>
                                </td>

                                <td>
                                    <strong><%= c.nombre %> <%= c.apellidos %></strong>
                                    <% if (c.apodo) { %>
                                    <div class="text-muted small"><i class="fas fa-user-tag me-1"></i><%= c.apodo %></div>
                                    <% } %>
                                    <% if (c.direccion) { %>
                                    <div class="text-muted small mt-1" title="<%= c.direccion %>">
                                        <i class="fas fa-map-marker-alt me-1"></i> <%= c.direccion.substring(0, 30) %><% if (c.direccion.length > 30) { %>...<% } %>
                                    </div>
                                    <% } %>
                                </td>

                                <td><%= c.cedula %></td>

                                <td>
                                    <% if (c.telefono1) { %>
                                    <div><a href="tel:<%= c.telefono1 %>" class="text-decoration-none text-dark"><i class="fas fa-phone me-1"></i> <%= c.telefono1 %></a></div>
                                    <% } %>
                                    <% if (c.telefono2) { %>
                                    <div><a href="tel:<%= c.telefono2 %>" class="text-decoration-none text-dark"><i class="fas fa-phone-alt me-1"></i> <%= c.telefono2 %></a></div>
                                    <% } %>
                                </td>

                                <td>
                                    <span class="badge <%= c.estado === 'activo' ? 'bg-success' : 'bg-danger' %>">
                                    <%= c.estado === 'activo' ? 'Activo' : 'Inactivo' %>
                                    </span>
                                </td>

                                <td>
                                    <div class="d-flex flex-wrap gap-1">
                                    <a href="/clientes/<%= c.id %>" class="btn btn-sm btn-outline-primary" title="Ver Detalles">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <a href="/clientes/<%= c.id %>/edit" class="btn btn-sm btn-outline-warning" title="Editar Cliente">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <button type="button" class="btn btn-sm btn-outline-danger delete-client-btn"
                                            data-client-id="<%= c.id %>" data-client-name="<%= c.nombre %> <%= c.apellidos %>" title="Eliminar Cliente">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                    </div>
                                </td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                <% } else { %>
                    <div class="alert alert-info text-center py-4 my-3">
                        <h4 class="alert-heading"><i class="fas fa-info-circle me-2"></i>¡No se encontraron clientes!</h4>
                        <p class="mb-0">Parece que no hay clientes registrados en el sistema con los filtros actuales.</p>
                        <hr>
                        <p class="mb-0">Puede <a href="/clientes/create" class="alert-link">agregar un nuevo cliente</a> o ajustar los filtros de búsqueda.</p>
                    </div>
                <% } %>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const clientSearchInput = document.getElementById('clientSearch');
        const clientStatusFilter = document.getElementById('clientStatusFilter');
        const clientsTable = document.getElementById('clientsTable');
        const tableBody = clientsTable ? clientsTable.querySelector('tbody') : null;
        const tableRows = tableBody ? Array.from(tableBody.querySelectorAll('tr')) : [];
        const initialAlert = document.querySelector('.alert.alert-info'); // Get the "no clients" alert

        // --- 1. Client-side Search and Filter ---
        function filterClients() {
            const searchTerm = clientSearchInput.value.toLowerCase().trim();
            const statusFilter = clientStatusFilter.value;
            let clientsFound = false;

            tableRows.forEach(row => {
                const clientName = row.children[1].textContent.toLowerCase(); // Full name column
                const clientCedula = row.children[2].textContent.toLowerCase(); // Cedula column
                const clientStatus = row.dataset.estado; // Get status from data attribute

                const matchesSearch = clientName.includes(searchTerm) || clientCedula.includes(searchTerm);
                const matchesStatus = statusFilter === 'todos' || clientStatus === statusFilter;

                if (matchesSearch && matchesStatus) {
                    row.style.display = '';
                    clientsFound = true;
                } else {
                    row.style.display = 'none';
                }
            });

            // Toggle the "No clients found" message
            if (initialAlert) {
                if (clientsFound) {
                    initialAlert.style.display = 'none';
                } else {
                    initialAlert.style.display = 'block';
                    // Update message for search/filter results
                    if (searchTerm || statusFilter !== 'todos') {
                        initialAlert.querySelector('.alert-heading').innerHTML = '<i class="fas fa-filter me-2"></i>¡No se encontraron resultados!';
                        initialAlert.querySelector('p:nth-of-type(1)').textContent = 'No hay clientes que coincidan con los criterios de búsqueda o filtro.';
                        initialAlert.querySelector('p:nth-of-type(2)').innerHTML = 'Puede <a href="/clientes/create" class="alert-link">agregar un nuevo cliente</a> o <a href="#" id="clearFiltersLink" class="alert-link">restablecer los filtros</a>.';
                        document.getElementById('clearFiltersLink').addEventListener('click', function(e) {
                            e.preventDefault();
                            clientSearchInput.value = '';
                            clientStatusFilter.value = 'todos';
                            filterClients(); // Re-apply filter
                        });
                    } else {
                         // Original message when no clients at all
                        initialAlert.querySelector('.alert-heading').innerHTML = '<i class="fas fa-info-circle me-2"></i>¡No se encontraron clientes!';
                        initialAlert.querySelector('p:nth-of-type(1)').textContent = 'Parece que no hay clientes registrados en el sistema.';
                        initialAlert.querySelector('p:nth-of-type(2)').innerHTML = 'Puede <a href="/clientes/create" class="alert-link">agregar un nuevo cliente</a>.';
                    }
                }
            }
        }

        if (clientSearchInput) clientSearchInput.addEventListener('keyup', filterClients);
        if (clientStatusFilter) clientStatusFilter.addEventListener('change', filterClients);

        // Initial filter application on page load
        filterClients();


        // --- 2. Client-side Sorting ---
        if (clientsTable) {
            clientsTable.querySelectorAll('th.sortable').forEach(header => {
                header.addEventListener('click', function() {
                    const column = this.dataset.sort;
                    const isAsc = this.classList.contains('asc'); // Check if currently ascending

                    // Remove existing sort classes
                    clientsTable.querySelectorAll('th.sortable').forEach(th => {
                        th.classList.remove('asc', 'desc');
                    });

                    // Add new sort class
                    if (isAsc) {
                        this.classList.add('desc');
                    } else {
                        this.classList.add('asc');
                    }

                    sortTable(column, !isAsc); // Pass current sort order
                });
            });

            function sortTable(column, asc) {
                const tbody = clientsTable.querySelector('tbody');
                if (!tbody) return;

                const rows = Array.from(tbody.querySelectorAll('tr'));

                rows.sort((a, b) => {
                    let valA, valB;

                    if (column === 'id') {
                        valA = parseInt(a.dataset.clientId);
                        valB = parseInt(b.dataset.clientId);
                    } else if (column === 'nombre') {
                        valA = a.children[1].querySelector('strong').textContent.toLowerCase();
                        valB = b.children[1].querySelector('strong').textContent.toLowerCase();
                    } else if (column === 'cedula') {
                        valA = a.children[2].textContent.toLowerCase();
                        valB = b.children[2].textContent.toLowerCase();
                    } else if (column === 'estado') {
                        valA = a.dataset.estado.toLowerCase();
                        valB = b.dataset.estado.toLowerCase();
                    }

                    if (valA < valB) return asc ? -1 : 1;
                    if (valA > valB) return asc ? 1 : -1;
                    return 0;
                });

                // Re-append sorted rows
                rows.forEach(row => tbody.appendChild(row));
            }
        }

        // --- 3. Tooltips Initialization ---
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        });

        // Add tooltips dynamically to all action buttons
        document.querySelectorAll('.btn-sm').forEach(button => {
            if (!button.hasAttribute('title')) return; // Only add if title exists
            new bootstrap.Tooltip(button, {
                placement: 'top', // Adjust placement as needed
                trigger: 'hover', // Show on hover
                container: 'body' // Append to body to avoid clipping issues
            });
        });

        // --- 4. Flash Messages with SweetAlert2 ---
        const successMessageEl = document.getElementById('success-message');
        const errorMessageEl = document.getElementById('error-message');

        if (successMessageEl) {
            Swal.fire({
                icon: 'success',
                title: 'Éxito',
                text: successMessageEl.dataset.message,
                toast: true, // Make it a toast
                position: 'top-end', // Position it at the top right
                showConfirmButton: false, // No confirm button
                timer: 3000, // Auto close after 3 seconds
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer);
                    toast.addEventListener('mouseleave', Swal.resumeTimer);
                }
            });
        }
        if (errorMessageEl) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: errorMessageEl.dataset.message,
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 4000,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer);
                    toast.addEventListener('mouseleave', Swal.resumeTimer);
                }
            });
        }

        // --- 5. Optional: Delete Client Confirmation with SweetAlert2 ---
        document.querySelectorAll('.delete-client-btn').forEach(button => {
            button.addEventListener('click', function() {
                const clientId = this.dataset.clientId;
                const clientName = this.dataset.clientName;

                Swal.fire({
                    title: `¿Está seguro de eliminar a ${clientName}?`,
                    text: "Esta acción no se puede deshacer. Los préstamos asociados a este cliente no se eliminarán, pero el cliente aparecerá como 'Inactivo'.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545', // Bootstrap danger red
                    cancelButtonColor: '#6c757d', // Bootstrap secondary gray
                    confirmButtonText: 'Sí, eliminar',
                    cancelButtonText: 'Cancelar',
                    customClass: {
                        confirmButton: 'btn btn-danger me-2',
                        cancelButton: 'btn btn-secondary'
                    },
                    buttonsStyling: false // Disable SweetAlert's default styling
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Create a form to send a DELETE request
                        const form = document.createElement('form');
                        form.method = 'POST';
                        form.action = `/clientes/${clientId}?_method=DELETE`;

                        const hiddenField = document.createElement('input');
                        hiddenField.type = 'hidden';
                        hiddenField.name = '_method';
                        hiddenField.value = 'DELETE';
                        form.appendChild(hiddenField);

                        document.body.appendChild(form);
                        form.submit();
                    }
                });
            });
        });

        // --- 6. Optional: Highlight new/updated row (if redirecting with success message) ---
        // This assumes your backend redirects back to /clientes with a flash message
        // and includes the client ID in the URL as a query parameter (e.g., /clientes?highlight=123)
        const urlParams = new URLSearchParams(window.location.search);
        const highlightId = urlParams.get('highlight');
        if (highlightId) {
            const highlightedRow = document.querySelector(`tr[data-client-id="${highlightId}"]`);
            if (highlightedRow) {
                highlightedRow.classList.add('table-row-highlight');
                // Remove the highlight after animation
                setTimeout(() => {
                    highlightedRow.classList.remove('table-row-highlight');
                }, 2000); // Match animation duration
            }
        }
    });
</script>

<%- include('../partials/footer') %>